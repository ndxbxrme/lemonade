// Generated by CoffeeScript 2.5.1
(function() {
  window.ADSR = function(opts) {
    var a, av, d, dv, gain, id, r, ref, ref1, s, sv;
    id = ogid();
    if ((ref = opts.note) != null ? ref.track.gain : void 0) {
      gain = (ref1 = opts.note) != null ? ref1.track.gain : void 0;
    } else {
      gain = opts.audio.createGain();
      gain.gain.value = 0;
    }
    a = opts.time + opts.attackTime;
    d = a + opts.decayTime;
    s = d + opts.sustainTime;
    r = s + opts.releaseTime;
    av = opts.attackValue;
    dv = opts.decayValue;
    sv = opts.sustainValue;
    gain.gain.setValueAtTime(0, opts.time);
    gain.gain.linearRampToValueAtTime(av, Math.max(a, 0));
    gain.gain.linearRampToValueAtTime(dv, Math.max(d, 0));
    if (!opts.hold) {
      gain.gain.linearRampToValueAtTime(sv, Math.max(s, 0));
      gain.gain.linearRampToValueAtTime(0, Math.max(r, 0));
    }
    if (opts.osc) {
      opts.osc.start(opts.time);
      if (!opts.hold) {
        opts.osc.stop(r);
        setTimeout(function() {
          return typeof opts.onStop === "function" ? opts.onStop(id) : void 0;
        }, (r - opts.audio.currentTime) * 1000);
      }
    }
    return {
      connect: gain.connect,
      gain: gain,
      stop: function() {
        gain.gain.cancelScheduledValues(opts.audio.currentTime);
        gain.gain.linearRampToValueAtTime(0, opts.releaseTime);
        if (opts.time >= opts.audio.currentTime + opts.releaseTime) {
          opts.osc.stop(opts.time + 10);
        } else {
          if (opts.osc) {
            opts.osc.stop(opts.audio.currentTime + opts.releaseTime);
          }
        }
        return setTimeout(function() {
          return typeof opts.onStop === "function" ? opts.onStop(id) : void 0;
        }, opts.releaseTime * 1000);
      }
    };
  };

  module.exports = window.ADSR;

}).call(this);
