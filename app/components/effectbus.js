// Generated by CoffeeScript 2.5.1
(function() {
  var EffectBus, globalDefs;

  globalDefs = {};

  EffectBus = function(audio) {
    var effects;
    effects = [];
    return {
      fromScript: function(script) {
        var all, args, defName, effect, globalName, i, instruction, instructions, j, key, len, mult, multGain, name, offset, offsetGain, val;
        script = script.trim().replace(/\n[ +]/g, '');
        instructions = script.split('\n');
        for (i = j = 0, len = instructions.length; j < len; i = ++j) {
          instruction = instructions[i];
          [all, name, args] = instruction.match(/(.*?)\((.*?)\)/);
          defName = null;
          if (/def /.test(name)) {
            [all, defName, name] = name.match(/def (.*?) (.*)/);
          }
          args = JSON.parse(args);
          effect = audio['create' + name]();
          for (key in args) {
            val = args[key];
            if (typeof val === 'string') {
              if (/@/.test(val)) {
                //connect to global
                [all, globalName, mult, offset] = val.match(/(.*?)@([^\+]+)[\+$]*(.*)/);
                multGain = audio.createGain();
                multGain.gain.value = +(mult || '1.0');
                offsetGain = audio.createGain();
                offsetGain.gain.value = +(offset || '0.0');
                globalDefs[globalName].connect(multGain);
                multGain.connect(offsetGain);
                offsetGain.connect(effect[key]);
              } else {
                effect[key] = val;
              }
            } else {
              effect[key].value = val;
            }
          }
          if (defName) {
            globalDefs[defName] = effect;
          } else {
            if (effects.length > 0) {
              effects[effects.length - 1].connect(effect);
            }
            effects.push(effect);
          }
        }
        return {
          connect: function(thing) {
            return effects[effects.length - 1].connect(thing);
          },
          destination: effects[0]
        };
      }
    };
  };

  EffectBus.startGlobal = function(time) {
    var effect, key, results;
    results = [];
    for (key in globalDefs) {
      effect = globalDefs[key];
      results.push(typeof effect.start === "function" ? effect.start(time) : void 0);
    }
    return results;
  };

  window.EffectBus = EffectBus;

  module.exports = EffectBus;

}).call(this);
