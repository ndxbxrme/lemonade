// Generated by CoffeeScript 2.5.1
(function() {
  var blue, getNoise, green, its, noise, pink, red, violet, white;

  ({blue, green, pink, red, violet, white} = require('@thi.ng/colored-noise'));

  its = {};

  getNoise = function(fn, args) {
    var name;
    name = fn.toString() + JSON.stringify(args);
    if (!its[name]) {
      its[name] = fn.apply(this, Array.from(args).slice(args.length - 2));
    }
    return its[name].next();
  };

  noise = {
    reset: function() {
      return its = {};
    },
    frac: function(x) {
      return x - Math.trunc(x);
    },
    hash: function(x) {
      var v;
      v = Math.sin(x * 1523.234235236) * 2342352.23423523;
      return Math.abs(this.frac(v));
    },
    pn: function(x) {
      var n1, n2;
      n1 = this.hash(Math.trunc(x));
      n2 = this.hash(Math.trunc(x) + 1);
      return n1 + this.frac(x) * (n2 - n1);
    },
    cn: function(x) {
      var k, m, p, t, t2, t3, tang, tf;
      k = Math.trunc(x);
      tf = 1;
      tang = (k) => {
        return tf * (this.hash(k + 1) - this.hash(k - 1)) / 2;
      };
      m = [tang(k), tang(k + 1)];
      p = [this.hash(k), this.hash(k + 1)];
      t = x - k;
      t2 = t * t;
      t3 = t * t2;
      return (2 * t3 - 3 * t2 + 1) * p[0] + (t3 - 2 * t2 + t) * m[0] + (-2 * t3 + 3 * t2) * p[1] + (t3 - t2) * m[1];
    },
    blue: function() {
      return getNoise(blue, arguments);
    },
    green: function() {
      return getNoise(green, arguments);
    },
    pink: function() {
      return getNoise(pink, arguments);
    },
    red: function() {
      return getNoise(red, arguments);
    },
    violet: function() {
      return getNoise(violet, arguments);
    },
    white: function() {
      return getNoise(white, arguments);
    }
  };

  module.exports = noise;

}).call(this);
