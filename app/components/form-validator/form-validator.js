// Generated by CoffeeScript 2.5.1
(function() {
  var validators;

  validators = {
    required: function(elem) {
      return elem.value;
    },
    invalid: function(elem) {
      return false;
    },
    confirm: function(elem) {
      return elem.value === document.querySelector('.next input[name=' + elem.name.replace('Confirm', '') + ']').value;
    },
    password: function(elem) {
      return /[A-Z]/.test(elem.value) && /[a-z]/.test(elem.value) && /[^0-9^a-z]/i.test(elem.value) && elem.value.length > 7;
    },
    email: function(elem) {
      return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i.test(elem.value);
    }
  };

  module.exports = {
    validate: function(eventSelector, shouldThrow) {
      var elem, error, errors, form, formSelector, i, j, k, len, len1, len2, localTruth, name, output, ref, ref1, truth, validatorTruth;
      formSelector = '.next form';
      if (typeof eventSelector === 'string') {
        formSelector = eventSelector;
      }
      form = document.querySelector(formSelector);
      output = {};
      truth = true;
      errors = [];
      ref = form.elements;
      for (i = 0, len = ref.length; i < len; i++) {
        elem = ref[i];
        if (elem.name) {
          output[elem.name] = elem.value;
          if (elem.type === 'number') {
            output[elem.name] = +output[elem.name];
          }
          localTruth = true;
          ref1 = elem.getAttributeNames();
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            name = ref1[j];
            if (validators[name]) {
              elem.className = elem.className.replace(/ *invalid| *valid/g, '');
              validatorTruth = validators[name](elem);
              localTruth = localTruth && validatorTruth;
              if (!validatorTruth) {
                errors.push({
                  name: elem.name + '-' + name,
                  dirty: elem.dirty
                });
                if (elem.dirty) {
                  elem.className += ' invalid';
                }
              } else {
                if (elem.dirty) {
                  elem.className += ' valid';
                }
              }
              if (!localTruth) {
                continue;
              }
            }
          }
          truth = truth && localTruth;
        }
      }
      form.querySelectorAll('.error').forEach(function(elem) {
        return elem.className = elem.className.replace(/ *invalid/g, '');
      });
      if (truth) {
        form.className = form.className.replace(/ *invalid/g, '');
      } else {
        form.className = form.className.replace(/ *invalid/g, '') + ' invalid';
        for (k = 0, len2 = errors.length; k < len2; k++) {
          error = errors[k];
          elem = document.querySelector('.error.' + error.name);
          if (elem && (shouldThrow || error.dirty)) {
            elem.className += ' invalid';
          }
        }
        if (shouldThrow) {
          throw 'invalid';
        }
      }
      return output;
    },
    init: function(selector) {
      var elem, form, i, len, ref;
      form = document.querySelector(selector || 'form');
      ref = form.elements;
      for (i = 0, len = ref.length; i < len; i++) {
        elem = ref[i];
        if (elem.name) {
          elem.onchange = (ev) => {
            ev.srcElement.dirty = true;
            return this.validate();
          };
          elem.onkeyup = this.validate;
        }
      }
      return this.validate();
    }
  };

}).call(this);
