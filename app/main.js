// Generated by CoffeeScript 2.5.1
(function() {
  var BrowserWindow, Graph, Menu, Notification, app, autoUpdater, buffer, dialog, doRender, encoder, fs, graph, ipcMain, lastB64, loadProject, mainWindow, newProject, nosmps, path, ready, renderEnd, renderPos, renderStart, rendering, reset, saveProject, settings, settingsPath, showGraph, showWaveform, stride, url, waveforms;

  ({app, BrowserWindow, Menu, Notification, ipcMain, dialog} = require('electron'));

  ({autoUpdater} = require('electron-updater'));

  fs = require('fs-extra');

  url = require('url');

  path = require('path');

  Graph = require('./components/graph');

  encoder = require('./components/encoder/encoder');

  mainWindow = null;

  newProject = function() {
    return mainWindow.webContents.send('newProject');
  };

  loadProject = async function() {
    var file, result;
    result = (await dialog.showOpenDialog({
      properties: ['openFile', 'multiSelections']
    }));
    if (result.cancelled) {
      return;
    }
    file = (await fs.readFile(result.filePaths[0]));
    return mainWindow.webContents.send('loadProject', file);
  };

  saveProject = function() {
    return mainWindow.webContents.send('saveProject');
  };

  showGraph = function() {
    return mainWindow.webContents.send('show', {
      state: 'graph'
    });
  };

  showWaveform = function() {
    return mainWindow.webContents.send('show', {
      state: 'waveform'
    });
  };

  settingsPath = path.join(app.getPath('userData'), 'settings.json');

  settings = {
    width: 700,
    height: 500
  };

  ready = async function() {
    var applicationMenu;
    autoUpdater.checkForUpdatesAndNotify();
    applicationMenu = Menu.buildFromTemplate([
      {
        label: 'File',
        submenu: [
          {
            label: 'New Project',
            click: newProject
          },
          {
            label: 'Load Project',
            click: loadProject
          },
          {
            label: 'Save Project',
            click: saveProject
          },
          {
            label: 'Quit',
            click: app.quit
          }
        ]
      },
      {
        label: 'View',
        submenu: [
          {
            label: 'Graph',
            click: showGraph
          },
          {
            label: 'Waveform',
            click: showWaveform
          }
        ]
      },
      {
        label: 'Tools',
        submenu: [
          {
            label: 'Convert Video folder',
            click: async function() {
              await encoder.convertVideoFolder();
              return new Notification({
                title: 'Lemonade',
                body: 'Finished processing'
              }).show();
            }
          }
        ]
      }
    ]);
    Menu.setApplicationMenu(applicationMenu);
    if ((await fs.exists(settingsPath))) {
      settings = JSON.parse((await fs.readFile(settingsPath, 'utf8')));
    }
    settings.webPreferences = {
      nodeIntegration: true
    };
    settings.show = false;
    settings.backgroundColor = '#222222';
    settings.darkTheme = true;
    mainWindow = new BrowserWindow(settings);
    mainWindow.once('ready-to-show', function() {
      return mainWindow.show();
    });
    mainWindow.on('close', function(event) {
      settings = mainWindow.getBounds();
      return fs.writeFile(settingsPath, JSON.stringify(settings), 'utf8');
    });
    mainWindow.on('closed', function() {
      return mainWindow = null;
    });
    mainWindow.loadURL(url.format({
      pathname: path.join(__dirname, 'index.html'),
      protocol: 'file:',
      slashes: true
    }));
    return mainWindow.openDevTools();
  };

  app.on('ready', ready);

  app.on('window-all-closed', function() {
    return process.platform === 'darwin' || app.quit();
  });

  app.on('activiate', function() {
    return mainWindow || ready();
  });

  lastB64 = null;

  graph = null;

  renderPos = 0;

  renderStart = 0;

  renderEnd = 0;

  nosmps = 0;

  rendering = false;

  stride = 4096;

  buffer = new Float32Array(stride);

  waveforms = [];

  reset = true;

  doRender = function() {
    var e, i, startPos;
    if (renderPos > renderEnd) {
      console.log('stopping render');
      rendering = false;
      mainWindow.send('finishedRender');
      return;
    }
    startPos = renderPos;
    try {
      i = 0;
      while (i < stride) {
        buffer[i] = graph.getValue((renderPos++ % nosmps) / nosmps);
        i++;
      }
      mainWindow.send('rendered', {
        position: startPos,
        buffer: buffer,
        reset: reset
      });
      reset = false;
      return setTimeout(doRender);
    } catch (error) {
      e = error;
      console.log('error', e);
      mainWindow.send('finishedRender');
      return rendering = false;
    }
  };

  ipcMain.on('startRender', async function(win, data) {
    var lastb64;
    if (data.b64 === lastB64) {
      return;
    }
    lastb64 = data.b64;
    graph = (await Graph.fromBase64(data.b64));
    graph.setWaveforms(data.waveforms || waveforms);
    graph.setBarNo(data.bar || 0);
    if (data.waveforms) {
      waveforms = data.waveforms;
    }
    renderStart = data.position;
    renderPos = renderStart;
    renderEnd = data.end || renderStart + data.nosmps;
    nosmps = data.nosmps;
    reset = true;
    console.log('start render', graph.getText(), rendering);
    if (!rendering) {
      console.log('doing it', data.waveforms);
      rendering = true;
      return doRender();
    }
  });

}).call(this);
